// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  skill: (where?: SkillWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workspace: (where?: WorkspaceWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  skill: (where: SkillWhereUniqueInput) => SkillPromise;
  skills: (
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Skill>;
  skillsConnection: (
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SkillConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  workspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  workspaces: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Workspace>;
  workspacesConnection: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkspaceConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSkill: (data: SkillCreateInput) => SkillPromise;
  updateSkill: (
    args: { data: SkillUpdateInput; where: SkillWhereUniqueInput }
  ) => SkillPromise;
  updateManySkills: (
    args: { data: SkillUpdateManyMutationInput; where?: SkillWhereInput }
  ) => BatchPayloadPromise;
  upsertSkill: (
    args: {
      where: SkillWhereUniqueInput;
      create: SkillCreateInput;
      update: SkillUpdateInput;
    }
  ) => SkillPromise;
  deleteSkill: (where: SkillWhereUniqueInput) => SkillPromise;
  deleteManySkills: (where?: SkillWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkspace: (data: WorkspaceCreateInput) => WorkspacePromise;
  updateWorkspace: (
    args: { data: WorkspaceUpdateInput; where: WorkspaceWhereUniqueInput }
  ) => WorkspacePromise;
  updateManyWorkspaces: (
    args: {
      data: WorkspaceUpdateManyMutationInput;
      where?: WorkspaceWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWorkspace: (
    args: {
      where: WorkspaceWhereUniqueInput;
      create: WorkspaceCreateInput;
      update: WorkspaceUpdateInput;
    }
  ) => WorkspacePromise;
  deleteWorkspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  deleteManyWorkspaces: (where?: WorkspaceWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  skill: (
    where?: SkillSubscriptionWhereInput
  ) => SkillSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workspace: (
    where?: WorkspaceSubscriptionWhereInput
  ) => WorkspaceSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "dateRange_ASC"
  | "dateRange_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SkillUpsertWithWhereUniqueWithoutUsersInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutUsersDataInput;
  create: SkillCreateWithoutUsersInput;
}

export type SkillWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface SkillUpdateManyDataInput {
  name?: String;
}

export interface SkillWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: SkillWhereInput[] | SkillWhereInput;
  OR?: SkillWhereInput[] | SkillWhereInput;
  NOT?: SkillWhereInput[] | SkillWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSkillsDataInput;
}

export interface WorkspaceUpdateManyDataInput {
  name?: String;
}

export interface UserUpdateWithoutSkillsDataInput {
  email?: String;
  workspaces?: WorkspaceUpdateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceUpdateManyWithoutAdministratorInput;
  teams?: TeamUpdateManyWithoutUsersInput;
  ledTeams?: TeamUpdateManyWithoutLeadInput;
}

export interface TeamUpdateManyWithoutUsersInput {
  create?: TeamCreateWithoutUsersInput[] | TeamCreateWithoutUsersInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutUsersInput[]
    | TeamUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutUsersInput[]
    | TeamUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  updateMany?:
    | TeamUpdateManyWithWhereNestedInput[]
    | TeamUpdateManyWithWhereNestedInput;
}

export interface WorkspaceUpdateManyWithoutUsersInput {
  create?:
    | WorkspaceCreateWithoutUsersInput[]
    | WorkspaceCreateWithoutUsersInput;
  delete?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  connect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  disconnect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  update?:
    | WorkspaceUpdateWithWhereUniqueWithoutUsersInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | WorkspaceUpsertWithWhereUniqueWithoutUsersInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput;
  updateMany?:
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput;
}

export interface WorkspaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkspaceWhereInput;
  AND?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  OR?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  NOT?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutUsersInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutUsersDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WorkspaceUpdateWithoutUsersDataInput {
  name?: String;
  administrator?: UserUpdateOneRequiredWithoutOwnedWorkspacesInput;
  teams?: TeamUpdateManyWithoutWorkspaceInput;
}

export interface SkillSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SkillWhereInput;
  AND?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
  OR?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
  NOT?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutOwnedWorkspacesInput {
  create?: UserCreateWithoutOwnedWorkspacesInput;
  update?: UserUpdateWithoutOwnedWorkspacesDataInput;
  upsert?: UserUpsertWithoutOwnedWorkspacesInput;
  connect?: UserWhereUniqueInput;
}

export interface WorkspaceUpdateInput {
  name?: String;
  users?: UserUpdateManyWithoutWorkspacesInput;
  administrator?: UserUpdateOneRequiredWithoutOwnedWorkspacesInput;
  teams?: TeamUpdateManyWithoutWorkspaceInput;
}

export interface UserUpdateWithoutOwnedWorkspacesDataInput {
  email?: String;
  workspaces?: WorkspaceUpdateManyWithoutUsersInput;
  skills?: SkillUpdateManyWithoutUsersInput;
  teams?: TeamUpdateManyWithoutUsersInput;
  ledTeams?: TeamUpdateManyWithoutLeadInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
}

export interface SkillUpdateManyWithoutUsersInput {
  create?: SkillCreateWithoutUsersInput[] | SkillCreateWithoutUsersInput;
  delete?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  disconnect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  update?:
    | SkillUpdateWithWhereUniqueWithoutUsersInput[]
    | SkillUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | SkillUpsertWithWhereUniqueWithoutUsersInput[]
    | SkillUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  updateMany?:
    | SkillUpdateManyWithWhereNestedInput[]
    | SkillUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  email?: String;
  workspaces?: WorkspaceUpdateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceUpdateManyWithoutAdministratorInput;
  skills?: SkillUpdateManyWithoutUsersInput;
  teams?: TeamUpdateManyWithoutUsersInput;
  ledTeams?: TeamUpdateManyWithoutLeadInput;
}

export interface SkillUpdateWithWhereUniqueWithoutUsersInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutUsersDataInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
  dateRange?: String;
}

export interface SkillUpdateWithoutUsersDataInput {
  name?: String;
}

export interface TeamUpdateInput {
  name?: String;
  users?: UserUpdateManyWithoutTeamsInput;
  lead?: UserUpdateOneRequiredWithoutLedTeamsInput;
  workspace?: WorkspaceUpdateOneRequiredWithoutTeamsInput;
  dateRange?: String;
}

export interface TeamUpsertWithWhereUniqueWithoutUsersInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutUsersDataInput;
  create: TeamCreateWithoutUsersInput;
}

export interface SkillUpdateManyMutationInput {
  name?: String;
}

export interface SkillScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  OR?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  NOT?: SkillScalarWhereInput[] | SkillScalarWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSkillsDataInput;
  create: UserCreateWithoutSkillsInput;
}

export interface SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput;
  data: SkillUpdateManyDataInput;
}

export interface UserUpsertWithoutOwnedWorkspacesInput {
  update: UserUpdateWithoutOwnedWorkspacesDataInput;
  create: UserCreateWithoutOwnedWorkspacesInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  lead?: UserWhereInput;
  workspace?: WorkspaceWhereInput;
  dateRange?: String;
  dateRange_not?: String;
  dateRange_in?: String[] | String;
  dateRange_not_in?: String[] | String;
  dateRange_lt?: String;
  dateRange_lte?: String;
  dateRange_gt?: String;
  dateRange_gte?: String;
  dateRange_contains?: String;
  dateRange_not_contains?: String;
  dateRange_starts_with?: String;
  dateRange_not_starts_with?: String;
  dateRange_ends_with?: String;
  dateRange_not_ends_with?: String;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface SkillCreateInput {
  name: String;
  users?: UserCreateManyWithoutSkillsInput;
}

export interface UserUpsertWithoutLedTeamsInput {
  update: UserUpdateWithoutLedTeamsDataInput;
  create: UserCreateWithoutLedTeamsInput;
}

export interface UserCreateWithoutSkillsInput {
  email: String;
  workspaces?: WorkspaceCreateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceCreateManyWithoutAdministratorInput;
  teams?: TeamCreateManyWithoutUsersInput;
  ledTeams?: TeamCreateManyWithoutLeadInput;
}

export interface TeamUpdateWithWhereUniqueWithoutUsersInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutUsersDataInput;
}

export interface WorkspaceCreateWithoutUsersInput {
  name: String;
  administrator: UserCreateOneWithoutOwnedWorkspacesInput;
  teams?: TeamCreateManyWithoutWorkspaceInput;
}

export interface TeamUpdateWithoutUsersDataInput {
  name?: String;
  lead?: UserUpdateOneRequiredWithoutLedTeamsInput;
  workspace?: WorkspaceUpdateOneRequiredWithoutTeamsInput;
  dateRange?: String;
}

export interface UserCreateWithoutOwnedWorkspacesInput {
  email: String;
  workspaces?: WorkspaceCreateManyWithoutUsersInput;
  skills?: SkillCreateManyWithoutUsersInput;
  teams?: TeamCreateManyWithoutUsersInput;
  ledTeams?: TeamCreateManyWithoutLeadInput;
}

export interface UserUpdateOneRequiredWithoutLedTeamsInput {
  create?: UserCreateWithoutLedTeamsInput;
  update?: UserUpdateWithoutLedTeamsDataInput;
  upsert?: UserUpsertWithoutLedTeamsInput;
  connect?: UserWhereUniqueInput;
}

export interface SkillCreateWithoutUsersInput {
  name: String;
}

export interface UserUpdateWithoutLedTeamsDataInput {
  email?: String;
  workspaces?: WorkspaceUpdateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceUpdateManyWithoutAdministratorInput;
  skills?: SkillUpdateManyWithoutUsersInput;
  teams?: TeamUpdateManyWithoutUsersInput;
}

export interface TeamCreateWithoutUsersInput {
  name: String;
  lead: UserCreateOneWithoutLedTeamsInput;
  workspace: WorkspaceCreateOneWithoutTeamsInput;
  dateRange?: String;
}

export interface WorkspaceUpdateManyWithoutAdministratorInput {
  create?:
    | WorkspaceCreateWithoutAdministratorInput[]
    | WorkspaceCreateWithoutAdministratorInput;
  delete?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  connect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  disconnect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
  update?:
    | WorkspaceUpdateWithWhereUniqueWithoutAdministratorInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutAdministratorInput;
  upsert?:
    | WorkspaceUpsertWithWhereUniqueWithoutAdministratorInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutAdministratorInput;
  deleteMany?: WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput;
  updateMany?:
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutLedTeamsInput {
  email: String;
  workspaces?: WorkspaceCreateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceCreateManyWithoutAdministratorInput;
  skills?: SkillCreateManyWithoutUsersInput;
  teams?: TeamCreateManyWithoutUsersInput;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutAdministratorInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutAdministratorDataInput;
}

export interface WorkspaceCreateWithoutAdministratorInput {
  name: String;
  users?: UserCreateManyWithoutWorkspacesInput;
  teams?: TeamCreateManyWithoutWorkspaceInput;
}

export interface WorkspaceUpdateWithoutAdministratorDataInput {
  name?: String;
  users?: UserUpdateManyWithoutWorkspacesInput;
  teams?: TeamUpdateManyWithoutWorkspaceInput;
}

export interface UserCreateWithoutWorkspacesInput {
  email: String;
  ownedWorkspaces?: WorkspaceCreateManyWithoutAdministratorInput;
  skills?: SkillCreateManyWithoutUsersInput;
  teams?: TeamCreateManyWithoutUsersInput;
  ledTeams?: TeamCreateManyWithoutLeadInput;
}

export interface UserUpdateManyWithoutWorkspacesInput {
  create?:
    | UserCreateWithoutWorkspacesInput[]
    | UserCreateWithoutWorkspacesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutWorkspacesInput[]
    | UserUpdateWithWhereUniqueWithoutWorkspacesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutWorkspacesInput[]
    | UserUpsertWithWhereUniqueWithoutWorkspacesInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface TeamCreateWithoutLeadInput {
  name: String;
  users?: UserCreateManyWithoutTeamsInput;
  workspace: WorkspaceCreateOneWithoutTeamsInput;
  dateRange?: String;
}

export interface UserUpdateWithWhereUniqueWithoutWorkspacesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutWorkspacesDataInput;
}

export interface UserCreateWithoutTeamsInput {
  email: String;
  workspaces?: WorkspaceCreateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceCreateManyWithoutAdministratorInput;
  skills?: SkillCreateManyWithoutUsersInput;
  ledTeams?: TeamCreateManyWithoutLeadInput;
}

export interface UserUpdateWithoutWorkspacesDataInput {
  email?: String;
  ownedWorkspaces?: WorkspaceUpdateManyWithoutAdministratorInput;
  skills?: SkillUpdateManyWithoutUsersInput;
  teams?: TeamUpdateManyWithoutUsersInput;
  ledTeams?: TeamUpdateManyWithoutLeadInput;
}

export interface WorkspaceCreateWithoutTeamsInput {
  name: String;
  users?: UserCreateManyWithoutWorkspacesInput;
  administrator: UserCreateOneWithoutOwnedWorkspacesInput;
}

export interface TeamUpdateManyWithoutLeadInput {
  create?: TeamCreateWithoutLeadInput[] | TeamCreateWithoutLeadInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutLeadInput[]
    | TeamUpdateWithWhereUniqueWithoutLeadInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutLeadInput[]
    | TeamUpsertWithWhereUniqueWithoutLeadInput;
  deleteMany?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  updateMany?:
    | TeamUpdateManyWithWhereNestedInput[]
    | TeamUpdateManyWithWhereNestedInput;
}

export interface TeamCreateWithoutWorkspaceInput {
  name: String;
  users?: UserCreateManyWithoutTeamsInput;
  lead: UserCreateOneWithoutLedTeamsInput;
  dateRange?: String;
}

export interface TeamUpdateWithWhereUniqueWithoutLeadInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutLeadDataInput;
}

export interface UserUpdateManyWithoutSkillsInput {
  create?: UserCreateWithoutSkillsInput[] | UserCreateWithoutSkillsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    | UserUpdateWithWhereUniqueWithoutSkillsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    | UserUpsertWithWhereUniqueWithoutSkillsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface TeamUpdateWithoutLeadDataInput {
  name?: String;
  users?: UserUpdateManyWithoutTeamsInput;
  workspace?: WorkspaceUpdateOneRequiredWithoutTeamsInput;
  dateRange?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  workspaces_every?: WorkspaceWhereInput;
  workspaces_some?: WorkspaceWhereInput;
  workspaces_none?: WorkspaceWhereInput;
  ownedWorkspaces_every?: WorkspaceWhereInput;
  ownedWorkspaces_some?: WorkspaceWhereInput;
  ownedWorkspaces_none?: WorkspaceWhereInput;
  skills_every?: SkillWhereInput;
  skills_some?: SkillWhereInput;
  skills_none?: SkillWhereInput;
  teams_every?: TeamWhereInput;
  teams_some?: TeamWhereInput;
  teams_none?: TeamWhereInput;
  ledTeams_every?: TeamWhereInput;
  ledTeams_some?: TeamWhereInput;
  ledTeams_none?: TeamWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateManyWithoutTeamsInput {
  create?: UserCreateWithoutTeamsInput[] | UserCreateWithoutTeamsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutTeamsInput[]
    | UserUpdateWithWhereUniqueWithoutTeamsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutTeamsInput[]
    | UserUpsertWithWhereUniqueWithoutTeamsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface WorkspaceUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTeamsDataInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutTeamsDataInput {
  email?: String;
  workspaces?: WorkspaceUpdateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceUpdateManyWithoutAdministratorInput;
  skills?: SkillUpdateManyWithoutUsersInput;
  ledTeams?: TeamUpdateManyWithoutLeadInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTeamsDataInput;
  create: UserCreateWithoutTeamsInput;
}

export type WorkspaceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface WorkspaceCreateManyWithoutUsersInput {
  create?:
    | WorkspaceCreateWithoutUsersInput[]
    | WorkspaceCreateWithoutUsersInput;
  connect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface SkillCreateManyWithoutUsersInput {
  create?: SkillCreateWithoutUsersInput[] | SkillCreateWithoutUsersInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
}

export interface UserCreateOneWithoutLedTeamsInput {
  create?: UserCreateWithoutLedTeamsInput;
  connect?: UserWhereUniqueInput;
}

export interface WorkspaceUpdateOneRequiredWithoutTeamsInput {
  create?: WorkspaceCreateWithoutTeamsInput;
  update?: WorkspaceUpdateWithoutTeamsDataInput;
  upsert?: WorkspaceUpsertWithoutTeamsInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface UserCreateManyWithoutWorkspacesInput {
  create?:
    | UserCreateWithoutWorkspacesInput[]
    | UserCreateWithoutWorkspacesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface WorkspaceUpdateWithoutTeamsDataInput {
  name?: String;
  users?: UserUpdateManyWithoutWorkspacesInput;
  administrator?: UserUpdateOneRequiredWithoutOwnedWorkspacesInput;
}

export interface UserCreateManyWithoutTeamsInput {
  create?: UserCreateWithoutTeamsInput[] | UserCreateWithoutTeamsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface WorkspaceUpsertWithoutTeamsInput {
  update: WorkspaceUpdateWithoutTeamsDataInput;
  create: WorkspaceCreateWithoutTeamsInput;
}

export interface TeamCreateManyWithoutWorkspaceInput {
  create?: TeamCreateWithoutWorkspaceInput[] | TeamCreateWithoutWorkspaceInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface TeamUpsertWithWhereUniqueWithoutLeadInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutLeadDataInput;
  create: TeamCreateWithoutLeadInput;
}

export interface WorkspaceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  administrator?: UserWhereInput;
  teams_every?: TeamWhereInput;
  teams_some?: TeamWhereInput;
  teams_none?: TeamWhereInput;
  AND?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  OR?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  NOT?: WorkspaceWhereInput[] | WorkspaceWhereInput;
}

export interface TeamScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  dateRange?: String;
  dateRange_not?: String;
  dateRange_in?: String[] | String;
  dateRange_not_in?: String[] | String;
  dateRange_lt?: String;
  dateRange_lte?: String;
  dateRange_gt?: String;
  dateRange_gte?: String;
  dateRange_contains?: String;
  dateRange_not_contains?: String;
  dateRange_starts_with?: String;
  dateRange_not_starts_with?: String;
  dateRange_ends_with?: String;
  dateRange_not_ends_with?: String;
  AND?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  OR?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  NOT?: TeamScalarWhereInput[] | TeamScalarWhereInput;
}

export interface WorkspaceCreateInput {
  name: String;
  users?: UserCreateManyWithoutWorkspacesInput;
  administrator: UserCreateOneWithoutOwnedWorkspacesInput;
  teams?: TeamCreateManyWithoutWorkspaceInput;
}

export interface TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput;
  data: TeamUpdateManyDataInput;
}

export interface TeamCreateInput {
  name: String;
  users?: UserCreateManyWithoutTeamsInput;
  lead: UserCreateOneWithoutLedTeamsInput;
  workspace: WorkspaceCreateOneWithoutTeamsInput;
  dateRange?: String;
}

export interface TeamUpdateManyDataInput {
  name?: String;
  dateRange?: String;
}

export interface UserCreateManyWithoutSkillsInput {
  create?: UserCreateWithoutSkillsInput[] | UserCreateWithoutSkillsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutWorkspacesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutWorkspacesDataInput;
  create: UserCreateWithoutWorkspacesInput;
}

export interface TeamCreateManyWithoutUsersInput {
  create?: TeamCreateWithoutUsersInput[] | TeamCreateWithoutUsersInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface TeamUpdateManyWithoutWorkspaceInput {
  create?: TeamCreateWithoutWorkspaceInput[] | TeamCreateWithoutWorkspaceInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | TeamUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | TeamUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  updateMany?:
    | TeamUpdateManyWithWhereNestedInput[]
    | TeamUpdateManyWithWhereNestedInput;
}

export interface TeamCreateManyWithoutLeadInput {
  create?: TeamCreateWithoutLeadInput[] | TeamCreateWithoutLeadInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface TeamUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutWorkspaceDataInput;
}

export interface SkillUpdateInput {
  name?: String;
  users?: UserUpdateManyWithoutSkillsInput;
}

export interface TeamUpdateWithoutWorkspaceDataInput {
  name?: String;
  users?: UserUpdateManyWithoutTeamsInput;
  lead?: UserUpdateOneRequiredWithoutLedTeamsInput;
  dateRange?: String;
}

export interface UserCreateInput {
  email: String;
  workspaces?: WorkspaceCreateManyWithoutUsersInput;
  ownedWorkspaces?: WorkspaceCreateManyWithoutAdministratorInput;
  skills?: SkillCreateManyWithoutUsersInput;
  teams?: TeamCreateManyWithoutUsersInput;
  ledTeams?: TeamCreateManyWithoutLeadInput;
}

export interface WorkspaceUpdateManyWithWhereNestedInput {
  where: WorkspaceScalarWhereInput;
  data: WorkspaceUpdateManyDataInput;
}

export interface WorkspaceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput;
  OR?: WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput;
  NOT?: WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutAdministratorInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutAdministratorDataInput;
  create: WorkspaceCreateWithoutAdministratorInput;
}

export interface TeamUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutWorkspaceDataInput;
  create: TeamCreateWithoutWorkspaceInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutUsersInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutUsersDataInput;
  create: WorkspaceCreateWithoutUsersInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface WorkspaceCreateOneWithoutTeamsInput {
  create?: WorkspaceCreateWithoutTeamsInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceCreateManyWithoutAdministratorInput {
  create?:
    | WorkspaceCreateWithoutAdministratorInput[]
    | WorkspaceCreateWithoutAdministratorInput;
  connect?: WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput;
}

export interface UserCreateOneWithoutOwnedWorkspacesInput {
  create?: UserCreateWithoutOwnedWorkspacesInput;
  connect?: UserWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WorkspacePreviousValues {
  id: ID_Output;
  name: String;
}

export interface WorkspacePreviousValuesPromise
  extends Promise<WorkspacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface WorkspacePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSkill {
  count: Int;
}

export interface AggregateSkillPromise
  extends Promise<AggregateSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillSubscription
  extends Promise<AsyncIterator<AggregateSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SkillEdge {
  cursor: String;
}

export interface SkillEdgePromise extends Promise<SkillEdge>, Fragmentable {
  node: <T = SkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillEdgeSubscription
  extends Promise<AsyncIterator<SkillEdge>>,
    Fragmentable {
  node: <T = SkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  workspaces: <T = FragmentableArray<Workspace>>(
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ownedWorkspaces: <T = FragmentableArray<Workspace>>(
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = FragmentableArray<Skill>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  teams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ledTeams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  workspaces: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ownedWorkspaces: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = Promise<AsyncIterator<SkillSubscription>>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ledTeams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Workspace {
  id: ID_Output;
  name: String;
}

export interface WorkspacePromise extends Promise<Workspace>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  administrator: <T = UserPromise>() => T;
  teams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkspaceSubscription
  extends Promise<AsyncIterator<Workspace>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  administrator: <T = UserSubscription>() => T;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkspaceEdge {
  cursor: String;
}

export interface WorkspaceEdgePromise
  extends Promise<WorkspaceEdge>,
    Fragmentable {
  node: <T = WorkspacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceEdge>>,
    Fragmentable {
  node: <T = WorkspaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SkillConnection {}

export interface SkillConnectionPromise
  extends Promise<SkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillEdge>>() => T;
  aggregate: <T = AggregateSkillPromise>() => T;
}

export interface SkillConnectionSubscription
  extends Promise<AsyncIterator<SkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillSubscription>() => T;
}

export interface WorkspaceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WorkspaceSubscriptionPayloadPromise
  extends Promise<WorkspaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspacePreviousValuesPromise>() => T;
}

export interface WorkspaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspacePreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface SkillSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SkillSubscriptionPayloadPromise
  extends Promise<SkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillPreviousValuesPromise>() => T;
}

export interface SkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillPreviousValuesSubscription>() => T;
}

export interface TeamEdge {
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SkillPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SkillPreviousValuesPromise
  extends Promise<SkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SkillPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspace {
  count: Int;
}

export interface AggregateWorkspacePromise
  extends Promise<AggregateWorkspace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceSubscription
  extends Promise<AsyncIterator<AggregateWorkspace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Team {
  id: ID_Output;
  name: String;
  dateRange?: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lead: <T = UserPromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  dateRange: () => Promise<String>;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  lead: <T = UserSubscription>() => T;
  workspace: <T = WorkspaceSubscription>() => T;
  dateRange: () => Promise<AsyncIterator<String>>;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name: String;
  dateRange?: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dateRange: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  dateRange: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface Skill {
  id: ID_Output;
  name: String;
}

export interface SkillPromise extends Promise<Skill>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SkillSubscription
  extends Promise<AsyncIterator<Skill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WorkspaceConnection {}

export interface WorkspaceConnectionPromise
  extends Promise<WorkspaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceEdge>>() => T;
  aggregate: <T = AggregateWorkspacePromise>() => T;
}

export interface WorkspaceConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspaceSubscription>() => T;
}

export interface TeamConnection {}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Skill",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Workspace",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
